generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Simplified User model for authentication
model User {
  id                String    @id @default(cuid())
  name              String
  email             String    @unique
  password          String
  emailVerified     Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  accounts          Account[]
  sessions          Session[]
  secrets           Secret[]
  sharedSecrets     SharedSecret[]
  accessLogs        AccessLog[]
  
  @@map("users")
}

// Email verification codes
model VerificationCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
  
  @@map("verification_codes")
}

// NextAuth.js Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth.js Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth.js VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Secret model for encrypted content sharing
model Secret {
  id              String      @id @default(cuid())
  title           String
  description     String?
  content         String      // Encrypted content
  contentType     SecretType  @default(TEXT)
  fileName        String?     // For file uploads
  password        String?     // Additional password protection
  salt            String?     // For encryption
  
  // Access control
  isActive        Boolean     @default(true)
  isPublic        Boolean     @default(false)
  expiresAt       DateTime?
  deleteAfterView Boolean     @default(false)
  maxViews        Int?
  currentViews    Int         @default(0)
  
  // Metadata
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  createdById     String
  
  // Relations
  createdBy       User            @relation(fields: [createdById], references: [id], onDelete: Cascade)
  sharedSecrets   SharedSecret[]
  accessLogs      AccessLog[]
  
  @@map("secrets")
}

// Sharing permissions for secrets
model SharedSecret {
  id          String      @id @default(cuid())
  secretId    String
  userId      String?     // Null if shared via link only
  email       String?     // Email for non-registered users
  permissions Permission  @default(VIEW)
  sharedAt    DateTime    @default(now())
  accessedAt  DateTime?   // When they first accessed it
  
  // Relations
  secret      Secret      @relation(fields: [secretId], references: [id], onDelete: Cascade)
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([secretId, userId])
  @@unique([secretId, email])
  @@map("shared_secrets")
}

// Access logging for security and analytics
model AccessLog {
  id          String   @id @default(cuid())
  secretId    String
  userId      String?  // Null for anonymous access
  email       String?  // Email if provided
  ipAddress   String?
  userAgent   String?
  accessedAt  DateTime @default(now())
  
  // Relations
  secret      Secret   @relation(fields: [secretId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("access_logs")
}

// Enums
enum SecretType {
  TEXT
  FILE
  IMAGE
  DOCUMENT
}

enum Permission {
  VIEW
  DOWNLOAD
  EDIT
}
